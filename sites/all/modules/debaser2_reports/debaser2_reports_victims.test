<?php
/*******************************************************************************************************************
Created By    : Davi Tapajos
Creation Date : 14/11/2011
Description   : Implements tests to ensure that queries related to cases, will be correct.
site.

Updated By    :
Update Date   :
Description   :

*******************************************************************************************************************/

class DebaserReportsVictimsTestCase extends DrupalWebTestCase{

  /**
   *
   */
  function getInfo() {
    return array(
      'name' => t('Debaser Reports - Victims'),
      'description' => t('Test the victims statistics'),
      'group' => t('debaser'),
    );
  }

  /**
   * setUp() performs any pre-requisite tasks that need to happen.
   */
  public function setUp() {
    // Enable any modules required for the test.
    parent::setUp(
      'debaser2_reports'
    );
    
    $path = drupal_get_path( 'module', 'debaser2_reports' );
    include_once( $path . '/helper/debaser2_reports.report.inc' );
    include_once( $path . '/helper/debaser2_reports_func_matrix.report.inc' );
    include_once( $path . '/queries/debaser2_reports_victims_queries.inc' );
  }

  /**
   *
   */
  public function test_tables_creation(){
    $tables = $this->_get_tables_list();

    foreach($tables as $table_name => $fields) {
      $sql = 'SELECT ';
      $i = 1;
      $count = count($fields);
      foreach($fields as $field) {
        $sql .= $field;
        $sql .= $count == $i ? ' ' : ', ';
        $i++;
      }
      $sql .= ' FROM {%s}';
      $result = db_query($sql, $table_name);
      $this->assertTrue($result, t("All ok with table !table", array("!table" => $table_name) ) );
    }

  }


/********************************************************************************************

                        TEST VICTIMS TOTAL VIOLATION

********************************************************************************************/

/**
 *
 * 
 */
public function test_victims_total_by_age_without_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'age', 'query');
  $results = $query_function();

  foreach($results as $age_range => $count){
    switch ($age_range) {
      case 'age_0_18': $expected = 6; break;
      case 'age_19_35': $expected = 3; break;
      case 'age_36_54': $expected = 1; break;
      case 'age_55_more': $expected = 1; break;
    } // switch age_range
    $message = 'Total by age without group';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
  }

}

/**
 * 
 * 
 */
public function test_victims_total_by_age_with_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'age', 'query');

  $group = 1099;
  $results = $query_function($group);

  foreach($results as $age_range => $count){
    switch ($age_range) {
      case 'age_0_18': $expected = 2; break;
      case 'age_19_35': $expected = 2; break;
      case 'age_36_54': $expected = 0; break;
      case 'age_55_more': $expected = 1; break;
    } // switch age_range
    $message = 'Total by age with group ' . $group;
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
  }
}


/**
 * 
 * 
 */
public function test_victims_total_by_age_without_group_with_filter_year() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'age', 'query');
  $results = $query_function(NULL, NULL, 'year');

  $known_results = array(
  
    'age_0_18' => array (
      '2008' => 2,
      '2009' => 2,
      '2010' => 2,
      '2011' => 0,
    ),
    'age_19_35' => array (
      '2008' => 1,
      '2009' => 1,
      '2010' => 0,
      '2011' => 1,
    ),
    'age_36_54' => array (
      '2008' => 0,
      '2009' => 0,
      '2010' => 0,
      '2011' => 1,
    ),
    'age_55_more' => array (
      '2008' => 1,
      '2009' => 0,
      '2010' => 0,
      '2011' => 0,
    ),
  );

  foreach($results as $filter => $age_ranges){
    foreach($age_ranges as $age_range => $count){
      $message = 'Total by age without group with filter year';
      $count = $results[$filter][$age_range];
      $expected = $known_results[$filter][$age_range];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
    } // year
  } // results
  
}

/**
 * 
 * 
 */
public function test_victims_total_by_age_without_group_with_filter_month() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'age', 'query');
  
  $results = $query_function(NULL, NULL, 'month');
  $known_results = array(
    'age_0_18' => array (
      '3/2008' => 0,
      '4/2008' => 2,
      '3/2009' => 1,
      '5/2009' => 1,
      '5/2010' => 1,
      '9/2010' => 1,
      '10/2011' => 0,
      '11/2011' => 0,
    ),
    'age_19_35' => array (
      '3/2008' => 1,
      '4/2008' => 0,
      '3/2009' => 1,
      '5/2009' => 0,
      '5/2010' => 0,
      '9/2010' => 0,
      '10/2011' => 1,
      '11/2011' => 0,
    ),
    'age_36_54' => array (
      '3/2008' => 0,
      '4/2008' => 0,
      '3/2009' => 0,
      '5/2009' => 0,
      '5/2010' => 0,
      '9/2010' => 0,
      '10/2011' => 0,
      '11/2011' => 1,
    ),
    'age_55_more' => array (
      '3/2008' => 1,
      '4/2008' => 0,
      '3/2009' => 0,
      '5/2009' => 0,
      '5/2010' => 0,
      '9/2010' => 0,
      '10/2011' => 0,
      '11/2011' => 0,
    ),
  );  
  
  foreach($results as $filter => $age_ranges){
    foreach($age_ranges as $age_range => $statuses){
      $message = 'Total by age without group with filter month';
      $count = $results[$filter][$age_range];
      $expected = $known_results[$filter][$age_range];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
    } // year
  } // results
  
}
/********************************************************************************************

                   TEST VICTIMS x ETHNICITY

********************************************************************************************/

/**
 *
 */
public function test_victims_ethnicity_without_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'ethnicity', 'query');
  $results = $query_function();

  foreach($results as $ethnicity => $count){
    switch ($ethnicity) {
      case 'ethnicity_1':
        $expected = 5;
        break;
      case 'ethnicity_2':
        $expected = 4;
        break;
      case 'ethnicity_3':
        $expected = 2;
        break;
    }
    $message = 'Ethnicity x Number of Victims';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
  }
  
}

/**
 *
 */
public function test_victims_ethnicity_with_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'ethnicity', 'query');
  $group   = 1100;
  $results = $query_function($group);

  foreach($results as $ethnicity => $count){
    switch ($ethnicity) {
      case 'ethnicity_1':
        $expected = 4;
        break;
      case 'ethnicity_2':
        $expected = 1;
        break;
      case 'ethnicity_3':
        $expected = 1;
        break;
    }
    $message = 'Ethnicity x Number of Victims';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
  }
  
}

/**
 *
 */
public function test_victims_ethnicity_without_group_with_filter_year() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'ethnicity', 'query');
  
  $results = $query_function(NULL, NULL, 'year');

  $known_results = array(
    'ethnicity_1' => array(
      '2008' => 1,
      '2009' => 3,
      '2010' => 1,
      '2011' => 0,      
    ),
    'ethnicity_2' => array(
      '2008' => 2,
      '2009' => 0,
      '2010' => 0,
      '2011' => 2,      
    ),
    'ethnicity_3' => array(
      '2008' => 1,
      '2009' => 0,
      '2010' => 1,
      '2011' => 0,      
    ),
  ); 
    
  
  foreach($results as $ethnicity => $filters){
    foreach($filters as $filter => $count){
      $message = 'Ethnicity x Number of Victims filtered by year';
      $count = $results[$ethnicity][$filter];
      $expected = $known_results[$ethnicity][$filter];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
  
}


/**
 *
 */
public function test_victims_ethnicity_without_group_with_filter_month() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'ethnicity', 'query');
  
  $results = $query_function(NULL, NULL, 'month');

  $known_results = array(
    'ethnicity_1' => array(
      '3/2008' => 0,
      '4/2008' => 1,
      '3/2009' => 2,
      '5/2009' => 1,
      '5/2010' => 1,
      '9/2010' => 0,
      '10/2011' => 0,
      '11/2011' => 0,
    ),
    'ethnicity_2' => array(
      '3/2008' => 2,
      '4/2008' => 0,
      '3/2009' => 0,
      '5/2009' => 0,
      '5/2010' => 0,
      '9/2010' => 0,
      '10/2011' => 1,
      '11/2011' => 1,
    ),
    'ethnicity_3' => array(
      '3/2008' => 0,
      '4/2008' => 1,
      '3/2009' => 0,
      '5/2009' => 0,
      '5/2010' => 0,
      '9/2010' => 1,
      '10/2011' => 0,
      '11/2011' => 0,
    ),
  ); 
        
  foreach($results as $ethnicity => $filters){
    foreach($filters as $filter => $count){
      $message = 'Ethnicity x Number of Victims filtered by month';
      $count = $results[$ethnicity][$filter];
      $expected = $known_results[$ethnicity][$filter];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }

}

/********************************************************************************************

                   TEST VICTIMS x POLITICAL AFFILIATION

********************************************************************************************/

/**
 *
 */
public function test_victims_political_affiliation_without_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'political_affiliation', 'query');
  $results = $query_function();

  foreach($results as $political_affiliation => $count){
    switch ($political_affiliation) {
      case 'political_affiliation_1':
        $expected = 2;
        break;
      case 'political_affiliation_2':
        $expected = 6;
        break;
      case 'political_affiliation_3':
        $expected = 0;
        break;
    }
    $message = 'Political Affiliation x Number of Victims';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
  }
  
}

/**
 *
 */
public function test_victims_political_affiliation_with_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'political_affiliation', 'query');

  $group = 1099;
  $results = $query_function($group);

  foreach($results as $political_affiliation => $count){
    switch ($political_affiliation) {
      case 'political_affiliation_1':
        $expected = 0;
        break;
      case 'political_affiliation_2':
        $expected = 3;
        break;
      case 'political_affiliation_3':
        $expected = 0;
        break;
    }
    $message = 'Political Affiliation x Number of Victims';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
  }
  
}

/**
 *
 */
public function test_victims_political_affiliation_without_group_with_filter_year() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'political_affiliation', 'query');
  
  $results = $query_function(NULL, 'year');

  $known_results = array(
    '2008' => array (
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 3,
      'political_affiliation_3' => 0,
    ),
    '2009' => array (
      'political_affiliation_1' => 1,
      'political_affiliation_2' => 2,
      'political_affiliation_3' => 0,
    ),
    '2010' => array (
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
    '2011' => array (
      'political_affiliation_1' => 1,
      'political_affiliation_2' => 1,
      'political_affiliation_3' => 0,
    ),
  ); 
        
  foreach($results as $filter => $political_affiliations){
    foreach($political_affiliations as $political_affiliation => $count){
      $message = 'Political affiliation x Number of Victims filtered by year';
      $count = $results[$filter][$political_affiliation];
      $expected = $known_results[$filter][$political_affiliation];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }

}

/**
 *
 */
public function test_victims_political_affiliation_without_group_with_filter_month() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'political_affiliation', 'query');
  
  $results = $query_function(NULL, 'month');

  $known_results = array(
    '3/2008' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 2,
      'political_affiliation_3' => 0,
    ),
    '4/2008' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 1,
      'political_affiliation_3' => 0,
    ),
    '3/2009' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 2,
      'political_affiliation_3' => 0,
    ),
    '5/2009' => array(
      'political_affiliation_1' => 1,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
    '5/2010' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
    '9/2010' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
    '10/2011' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 1,
      'political_affiliation_3' => 0,
    ),
    '11/2011' => array(
      'political_affiliation_1' => 1,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
    
  ); 
  
  foreach($results as $filter => $political_affiliations){
    foreach($political_affiliations as $political_affiliation => $count){
      $message = 'Political affiliation x Number of Victims filtered by month';
      $count = $results[$filter][$political_affiliation];
      $expected = $known_results[$filter][$political_affiliation];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
}


/********************************************************************************************

                   TEST VICTIMS x GENDER

********************************************************************************************/

/**
 *
 */
public function test_victims_gender_without_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'gender', 'query');
  $results = $query_function();

  foreach($results as $gender => $count){
    switch ($gender) {
      case 'Male':
        $expected = 4;
        break;
      case 'Female':
        $expected = 7;
        break;
    }
    $message = 'Gender x Number of Victims';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
  }
  
}

/**
 *
 */
public function test_victims_gender_with_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'gender', 'query');
  $group = 1100;
  $results = $query_function($group);

  foreach($results as $gender => $count){
    switch ($gender) {
      case 'Male':
        $expected = 2;
        break;
      case 'Female':
        $expected = 4;
        break;
    }
    $message = 'Gender x Number of Victims';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
  }
  
}


/**
 *
 */
public function test_victims_gender_without_group_with_filter_year() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'gender', 'query');
  
  $results = $query_function(NULL, 'year');

  $known_results = array(
    '2008' => array (
      'Male' => 2,
      'Female' => 2,
    ),
    '2009' => array (
      'Male' => 1,
      'Female' => 2,
    ),
    '2010' => array (
      'Male' => 1,
      'Female' => 1,
    ),
    '2011' => array (
      'Male' => 0,
      'Female' => 2,
    ),
  ); 
        
  foreach($results as $filter => $genders){
    foreach($genders as $gender => $count){
      $message = 'Gender x Number of Victims filtered by year';
      $count = $results[$filter][$gender];
      $expected = $known_results[$filter][$gender];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }

}

/**
 *
 */
public function test_victims_gender_without_group_with_filter_month() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('total_violations', 'gender', 'query');
  
  $results = $query_function(NULL, 'month');
  
  // $this->fail( '<pre>' . print_r($results, TRUE) . '</pre>' );

  $known_results = array(
    '3/2008' => array(
      'Male' => 1,
      'Female' => 1,
    ),
    '4/2008' => array(
      'Male' => 1,
      'Female' => 1,
    ),
    '3/2009' => array(
      'Male' => 1,
      'Female' => 1,
    ),
    '5/2009' => array(
      'Male' => 0,
      'Female' => 1,
    ),
    '5/2010' => array(
      'Male' => 1,
      'Female' => 0,
    ),
    '9/2010' => array(
      'Male' => 0,
      'Female' => 1,
    ),
    '10/2011' => array(
      'Male' => 0,
      'Female' => 1,
    ),
    '11/2011' => array(
      'Male' => 0,
      'Female' => 1,
    ),
    
  ); 

  foreach($results as $filter => $genders){
    foreach($genders as $gender => $count){
      $message = 'Gender x Number of Victims filtered by month';
      $count = $results[$filter][$gender];
      $expected = $known_results[$filter][$gender];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }

}

/********************************************************************************************

                   TEST VICTIMS VIOLATION INTERNATIONAL STANDARDS

********************************************************************************************/


/**
 * 
 */
public function test_victims_international_standard_by_age_without_group_with_standard() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'age', 'query');
  
  $results = $query_function(NULL, 1);
  $standard = 'international_standard_1';
  
  foreach($results as $age_range => $range){
    switch ($age_range) {
      case 'age_0_18': $expected = 6; break;
      case 'age_19_35': $expected = 1; break;
      case 'age_36_54': $expected = 0; break;
      case 'age_55_more': $expected = 0; break;
    }
    $count = $results[$age_range][$standard];
    $message = 'International standard by age without group';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
  }
}

/**
 * 
 */
public function test_victims_international_standard_by_age_with_group_with_standard() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'age', 'query');
  
  $group = 1100;
  $results = $query_function($group, 1);
  $standard = 'international_standard_1';
  
  foreach($results as $age_range => $range){
    switch ($age_range) {
      case 'age_0_18': $expected = 4; break;
      case 'age_19_35': $expected = 1; break;
      case 'age_36_54': $expected = 0; break;
      case 'age_55_more': $expected = 0; break;
    }
    $count = $results[$age_range][$standard];
    $message = 'International standard by age with group ' . $group;
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
  }
}

/**
 * 
 */
public function test_victims_international_standard_by_age_without_group_with_standard_with_filter_year() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'age', 'query');
  
  $results = $query_function(NULL, 1, 'year');

  $known_results = array(
    '2008' => array(
      'age_0_18' => 2,
      'age_19_35' => 0,
      'age_36_54' => 0,
      'age_55_more' => 0,
    ),
    '2009' => array(
      'age_0_18' => 2,
      'age_19_35' => 1,
      'age_36_54' => 0,
      'age_55_more' => 0,
    ),
    '2010' => array(
      'age_0_18' => 2,
      'age_19_35' => 0,
      'age_36_54' => 0,
      'age_55_more' => 0,
    ),
  );
        
  foreach($results as $filter => $subs){
    foreach($subs as $sub => $count){
      $message = 'International standard x Age filtered by year';
      $expected = $known_results[$filter][$sub];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_age_without_group_with_standard_with_filter_month() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'age', 'query');
  
  $results = $query_function(NULL, 1, 'month');

  $known_results = array(
    '4/2008' => array(
      'age_0_18' => 2,
      'age_19_35' => 0,
      'age_36_54' => 0,
      'age_55_more' => 0,
    ),
    '3/2009' => array(
      'age_0_18' => 1,
      'age_19_35' => 1,
      'age_36_54' => 0,
      'age_55_more' => 0,
    ),
    '5/2009' => array(
      'age_0_18' => 1,
      'age_19_35' => 0,
      'age_36_54' => 0,
      'age_55_more' => 0,
    ),
    '5/2010' => array(
      'age_0_18' => 1,
      'age_19_35' => 0,
      'age_36_54' => 0,
      'age_55_more' => 0,
    ),
    '9/2010' => array(
      'age_0_18' => 1,
      'age_19_35' => 0,
      'age_36_54' => 0,
      'age_55_more' => 0,
    ),
  );
        
  foreach($results as $filter => $subs){
    foreach($subs as $sub => $count){
      $message = 'International standard x Age filtered by month';
      $expected = $known_results[$filter][$sub];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_ethnicity_without_group_with_standard() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'ethnicity', 'query');
  
  $results = $query_function(NULL, 1);
  $standard = 'international_standard_1';
  
  foreach($results as $filter_key => $filter){
    switch ($filter_key) {
      case 'ethnicity_1': $expected = 5; break;
      case 'ethnicity_2': $expected = 0; break;
      case 'ethnicity_3': $expected = 2; break;
    }
    $count = $results[$filter_key][$standard];
    $message = 'International standard by ethnicity without group';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_ethnicity_with_group_with_standard() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'ethnicity', 'query');
  
  $group = 1100;
  $results = $query_function($group, 1);
  $standard = 'international_standard_1';
  
  foreach($results as $filter_key => $filter){
    switch ($filter_key) {
      case 'ethnicity_1': $expected = 4; break;
      case 'ethnicity_2': $expected = 0; break;
      case 'ethnicity_3': $expected = 1; break;
    }
    $count = $results[$filter_key][$standard];
    $message = 'International standard by ethnicity with group ' . $group;
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
  }
}

/**
 * 
 */
public function test_victims_international_standard_by_ethnicity_without_group_with_standard_with_filter_year() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'ethnicity', 'query');
  
  $results = $query_function(NULL, 1, 'year');

  $known_results = array(
    '2008' => array(
      'ethnicity_1' => 1,
      'ethnicity_2' => 0,
      'ethnicity_3' => 1,
    ),
    '2009' => array(
      'ethnicity_1' => 3,
      'ethnicity_2' => 0,
      'ethnicity_3' => 0,
    ),
    '2010' => array(
      'ethnicity_1' => 1,
      'ethnicity_2' => 0,
      'ethnicity_3' => 1,
    ),
  );
        
  foreach($results as $filter => $subs){
    foreach($subs as $sub => $count){
      $message = 'International standard x ethnicity filtered by year';
      $expected = $known_results[$filter][$sub];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_ethnicity_without_group_with_standard_with_filter_month() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'ethnicity', 'query');
  
  $results = $query_function(NULL, 1, 'month');

  $known_results = array(
    '4/2008' => array(
      'ethnicity_1' => 1,
      'ethnicity_2' => 0,
      'ethnicity_3' => 1,
    ),
    '3/2009' => array(
      'ethnicity_1' => 2,
      'ethnicity_2' => 0,
      'ethnicity_3' => 0,
    ),
    '5/2009' => array(
      'ethnicity_1' => 1,
      'ethnicity_2' => 0,
      'ethnicity_3' => 0,
    ),
    '5/2010' => array(
      'ethnicity_1' => 1,
      'ethnicity_2' => 0,
      'ethnicity_3' => 0,
    ),
    '9/2010' => array(
      'ethnicity_1' => 0,
      'ethnicity_2' => 0,
      'ethnicity_3' => 1,
    ),
  );
        
  foreach($results as $filter => $subs){
    foreach($subs as $sub => $count){
      $message = 'International standard x ethnicity filtered by month';
      $expected = $known_results[$filter][$sub];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_political_affiliation_without_group_with_standard() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'political_affiliation', 'query');
  
  $results = $query_function(NULL, 1);
  $standard = 'international_standard_1';
  
  foreach($results as $filter_key => $filter){
    switch ($filter_key) {
      case 'political_affiliation_1': $expected = 1; break;
      case 'political_affiliation_2': $expected = 3; break;
      case 'political_affiliation_3': $expected = 0; break;
    }
    $count = $results[$filter_key][$standard];
    $message = 'International standard by political affiliation without group';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_political_affiliation_with_group_with_standard() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'political_affiliation', 'query');
  
  $group = 1099;
  $results = $query_function($group, 2);
  $standard = 'international_standard_2';
  
  foreach($results as $filter_key => $filter){
    switch ($filter_key) {
      case 'political_affiliation_1': $expected = 0; break;
      case 'political_affiliation_2': $expected = 3; break;
      case 'political_affiliation_3': $expected = 0; break;
    }
    $count = $results[$filter_key][$standard];
    $message = 'International standard by political affiliation with group ' . $group;
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_political_affiliation_without_group_with_standard_with_filter_year() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'political_affiliation', 'query');
  
  $results = $query_function(NULL, 1, 'year');

  $known_results = array(
    '2008' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 1,
      'political_affiliation_3' => 0,
    ),
    '2009' => array(
      'political_affiliation_1' => 1,
      'political_affiliation_2' => 2,
      'political_affiliation_3' => 0,
    ),
    '2010' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
  );
        
  foreach($results as $filter => $subs){
    foreach($subs as $sub => $count){
      $message = 'International standard x political affiliation filtered by year';
      $expected = $known_results[$filter][$sub];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_political_affiliation_without_group_with_standard_with_filter_month() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'political_affiliation', 'query');
  
  $results = $query_function(NULL, 1, 'month');

  $known_results = array(
    '4/2008' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 1,
      'political_affiliation_3' => 0,
    ),
    '3/2009' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 2,
      'political_affiliation_3' => 0,
    ),
    '5/2009' => array(
      'political_affiliation_1' => 1,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
    '5/2010' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
    '9/2010' => array(
      'political_affiliation_1' => 0,
      'political_affiliation_2' => 0,
      'political_affiliation_3' => 0,
    ),
  );
        
  foreach($results as $filter => $subs){
    foreach($subs as $sub => $count){
      $message = 'International standard x political affiliation filtered by month';
      $expected = $known_results[$filter][$sub];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_gender_without_group_with_standard() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'gender', 'query');
  
  $results = $query_function(NULL, 1);
  $standard = 'international_standard_1';
  
  foreach($results as $filter_key => $filter){
    switch ($filter_key) {
      case 'Male': $expected = 3; break;
      case 'Female': $expected = 4; break;
    }
    $count = $results[$filter_key][$standard];
    $message = 'International standard by gender without group';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_gender_with_group_with_standard() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'gender', 'query');
  
  $group = 1100;
  $results = $query_function($group, 1);
  $standard = 'international_standard_1';
  
  foreach($results as $filter_key => $filter){
    switch ($filter_key) {
      case 'Male': $expected = 2; break;
      case 'Female': $expected = 3; break;
    }
    $count = $results[$filter_key][$standard];
    $message = 'International standard by gender with group ' . $group;
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_gender_without_group_with_standard_with_filter_year() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'gender', 'query');
  
  $results = $query_function(NULL, 1, 'year');

  $known_results = array(
    '2008' => array(
      'Male' => 1,
      'Female' => 1,
    ),
    '2009' => array(
      'Male' => 1,
      'Female' => 2,
    ),
    '2010' => array(
      'Male' => 1,
      'Female' => 1,
    ),
  );
        
  foreach($results as $filter => $subs){
    foreach($subs as $sub => $count){
      $message = 'International standard x gender filtered by year';
      $expected = $known_results[$filter][$sub];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
  
}

/**
 * 
 */
public function test_victims_international_standard_by_gender_without_group_with_standard_with_filter_month() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('international_standards', 'gender', 'query');
  
  $results = $query_function(NULL, 1, 'month');

  $known_results = array(
    '4/2008' => array(
      'Male' => 1,
      'Female' => 1,
    ),
    '3/2009' => array(
      'Male' => 1,
      'Female' => 1,
    ),
    '5/2009' => array(
      'Male' => 0,
      'Female' => 1,
    ),
    '5/2010' => array(
      'Male' => 1,
      'Female' => 0,
    ),
    '9/2010' => array(
      'Male' => 0,
      'Female' => 1,
    ),
  );
        
  foreach($results as $filter => $subs){
    foreach($subs as $sub => $count){
      $message = 'International standard x gender filtered by month';
      $expected = $known_results[$filter][$sub];
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) )  );
    }
  }
}

/********************************************************************************************

                   TEST VICTIMS GENDER Vs AGE

********************************************************************************************/

/**
 * 
 */
public function test_victims_gender_by_age_without_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('others', 'gender_age', 'query');
  $results = $query_function();
  
  foreach($results as $age_range => $genders){
    foreach($genders as $gender => $count){
      switch ($age_range) {
        case 'age_0_18':
          switch($gender) {
            case 'Male':   $expected = 3; break;
            case 'Female': $expected = 3; break;
          } // age_0_18
          break;
        case 'age_19_35':
          switch($gender) {
            case 'Male':   $expected = 1; break;
            case 'Female': $expected = 2; break;
          } // age_19_35
          break;
        case 'age_36_54':
          switch($gender) {
            case 'Male':   $expected = 0; break;
            case 'Female': $expected = 1; break;
          } // age_36_54
          break;
        case 'age_55_more':
          switch($gender) {
            case 'Male':   $expected = 0; break;
            case 'Female': $expected = 1; break;
          } // age_55_more
          break;
      } // switch age_range
      $message = 'Gender by age without group';
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
    }
  }
  
}

/**
 * 
 */
public function test_victims_gender_by_age_with_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('others', 'gender_age', 'query');
  
  $group = 1100;
  $results = $query_function($group);
  
  foreach($results as $age_range => $genders){
    foreach($genders as $gender => $count){
      switch ($age_range) {
        case 'age_0_18':
          switch($gender) {
            case 'Male':   $expected = 2; break;
            case 'Female': $expected = 2; break;
          } // age_0_18
          break;
        case 'age_19_35':
          switch($gender) {
            case 'Male':   $expected = 0; break;
            case 'Female': $expected = 1; break;
          } // age_19_35
          break;
        case 'age_36_54':
          switch($gender) {
            case 'Male':   $expected = 0; break;
            case 'Female': $expected = 1; break;
          } // age_36_54
          break;
        case 'age_55_more':
          switch($gender) {
            case 'Male':   $expected = 0; break;
            case 'Female': $expected = 0; break;
          } // age_55_more
          break;
      } // switch age_range
      $message = 'Gender by age with group ' . $group;
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );  
    }
  }
  
}


/********************************************************************************************

                   TEST VICTIMS VIOLATION TYPE x LOCATION

********************************************************************************************/

/**
 *
 */
public function test_victims_violation_type_by_location_without_group() {
  $this->_insert_victims();
  // $query_function = debaser2_reports_victims_functions('violation_type', 'location', 'query');
  $query_function = debaser2_reports_violation_functions(4, 'location', 'query');
  $results = $query_function();

  //$this->fail('<pre>' . print_r($results, TRUE) . '</pre>');

  foreach($results as $violation_type => $locations){
    foreach($locations as $location => $count){
      switch ($violation_type) {
        case 'type_1':
          switch($location) {
            case 'location_1': $expected = 3; break;
            case 'location_2': $expected = 1; break;
            case 'location_3': $expected = 1; break;
          }
          break;
        case 'type_2':
          switch($location) {
            case 'location_1': $expected = 2; break;
            case 'location_2': $expected = 0; break;
            case 'location_3': $expected = 2; break;
          }
          break;
        case 'type_3':
          switch($location) {
            case 'location_1': $expected = 2; break;
            case 'location_2': $expected = 1; break;
            case 'location_3': $expected = 0; break;
          }
          break;

      }
      $message = 'Violation Type(' . $violation_type. ') x Location(' . $location . ')';
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
    }
  }
}



/**
 * 
 */
public function test_victims_violation_type_by_location_with_group() {
  $this->_insert_victims();
  // $query_function = debaser2_reports_victims_functions('violation_type', 'location', 'query');
  $query_function = debaser2_reports_violation_functions(4, 'location', 'query');
  $group = 1100;
  $results = $query_function($group);

  //$this->fail('<pre>' . print_r($results, TRUE) . '</pre>');

  foreach($results as $violation_type => $locations){
    foreach($locations as $location => $count){
      switch ($violation_type) {
        case 'type_1':
          switch($location) {
            case 'location_1': $expected = 2; break;
            case 'location_2': $expected = 1; break;
            case 'location_3': $expected = 1; break;
          }
          break;
        case 'type_2':
          switch($location) {
            case 'location_1': $expected = 0; break;
            case 'location_2': $expected = 0; break;
            case 'location_3': $expected = 2; break;
          }
          break;
        case 'type_3':
          switch($location) {
            case 'location_1': $expected = 1; break;
            case 'location_2': $expected = 0; break;
            case 'location_3': $expected = 0; break;
          }
          break;

      }
      $message = 'Violation Type(' . $violation_type. ') x Location(' . $location . ')';
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
    }
  }
}

/********************************************************************************************

                   TEST VICTIMS VIOLATION TYPE x POLITICAL AFFILIATION

********************************************************************************************/

/**
 *
 * TODO
 */
function test_victims_violation_type_by_political_affiliation_without_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('political_affiliation', 'violation_type', 'query');
  $results = $query_function();

  foreach($results as $violation_type => $political_affiliations){
    foreach($political_affiliations as $political_affiliation => $count){
      switch ($violation_type) {
        case 'type_1':
          switch($political_affiliation) {
            case 'political_affiliation_1': $expected = 1; break;
            case 'political_affiliation_2': $expected = 5; break;
            case 'political_affiliation_3': $expected = 0; break;
          }
          break;
        case 'type_2':
          switch($political_affiliation) {
            case 'political_affiliation_1': $expected = 1; break;
            case 'political_affiliation_2': $expected = 0; break;
            case 'political_affiliation_3': $expected = 0; break;
          }
          break;
        case 'type_3':
          switch($political_affiliation) {
            case 'political_affiliation_1': $expected = 0; break;
            case 'political_affiliation_2': $expected = 1; break;
            case 'political_affiliation_3': $expected = 0; break;
          }
          break;

      }
      $message = 'Violation Type(' . $violation_type. ') x Political Affiliation(' . $political_affiliation . ')';
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
    }
  }
}



/**
 *
 */
public function test_victims_violation_type_by_political_affiliation_with_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('political_affiliation', 'violation_type', 'query');
  $group = 1100;
  $results = $query_function($group);

  //$this->fail('<pre>' . print_r($results, TRUE) . '</pre>');

  foreach($results as $violation_type => $political_affiliations){
    foreach($political_affiliations as $political_affiliation => $count){
      switch ($violation_type) {
        case 'type_1':
          switch($political_affiliation) {
            case 'political_affiliation_1': $expected = 1; break;
            case 'political_affiliation_2': $expected = 3; break;
            case 'political_affiliation_3': $expected = 0; break;
          }
          break;
        case 'type_2':
          switch($political_affiliation) {
            case 'political_affiliation_1': $expected = 1; break;
            case 'political_affiliation_2': $expected = 0; break;
            case 'political_affiliation_3': $expected = 0; break;
          }
          break;
        case 'type_3':
          switch($political_affiliation) {
            case 'political_affiliation_1': $expected = 0; break;
            case 'political_affiliation_2': $expected = 0; break;
            case 'political_affiliation_3': $expected = 0; break;
          }
          break;

      }
      $message = 'Violation Type(' . $violation_type. ') x Political Affiliation(' . $political_affiliation . ')';
      $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
    }
  }
}

/********************************************************************************************

                   TEST PERPETRATOR AGE x TOTAL VIOLATIONS

********************************************************************************************/

/**
 * 
 */
public function test_perpetrator_age_by_total_violations_without_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('others', 'perpetrator_age', 'query');

  $results = $query_function();

  //$this->fail('<pre>' . print_r($results, TRUE) . '</pre>');

  foreach($results as $age => $count){
    switch ($age) {
      case 'age_0_18': $expected = 1; break;
      case 'age_19_35': $expected = 2; break;
      case 'age_36_54': $expected = 3; break;
      case 'age_55_more': $expected = 0; break;
    }
    $message = 'Perpetrator Age (' . $age . ') x Total Violations (' . $count . ')';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
  }

}

/**
 *
 */
public function test_perpetrator_age_by_total_violations_with_group() {
  $this->_insert_victims();
  $query_function = debaser2_reports_victims_functions('others', 'perpetrator_age', 'query');
  $group = 1100;
  $results = $query_function($group);

  //$this->fail('<pre>' . print_r($results, TRUE) . '</pre>');

  foreach($results as $age => $count){
    switch ($age) {
      case 'age_0_18': $expected = 1; break;
      case 'age_19_35': $expected = 1; break;
      case 'age_36_54': $expected = 2; break;
      case 'age_55_more': $expected = 0; break;
    }
    $message = 'Perpetrator Age (' . $age . ') x Total Violations (' . $count . ')';
    $this->assertEqual($count, $expected, t('!message | result: !count | expected: !expected', array('!message' => $message, '!expected' => $expected, '!count' => $count) ) );
  }

}


/********************************************************************************************

                        FUNCTIONS TO HELP TESTS

********************************************************************************************/

  /**
   *
   */
  private function _insert_victims() {
    db_query("INSERT INTO {debaser2_location} VALUES (NULL, 'location_1');"); // 1
    db_query("INSERT INTO {debaser2_location} VALUES (NULL, 'location_2');"); // 2
    db_query("INSERT INTO {debaser2_location} VALUES (NULL, 'location_3');"); // 3

    db_query("INSERT INTO {debaser2_violation_international_standard} VALUES (NULL, 'international_standard_1');"); // 1
    db_query("INSERT INTO {debaser2_violation_international_standard} VALUES (NULL, 'international_standard_2');"); // 2
    db_query("INSERT INTO {debaser2_violation_international_standard} VALUES (NULL, 'international_standard_3');"); // 3

    db_query("INSERT INTO {debaser2_violation_type} VALUES (NULL, 'type_1');"); // 1
    db_query("INSERT INTO {debaser2_violation_type} VALUES (NULL, 'type_2');"); // 2
    db_query("INSERT INTO {debaser2_violation_type} VALUES (NULL, 'type_3');"); // 3

    db_query("INSERT INTO {debaser2_case_status} VALUES (NULL, 'case_status_1');"); // 1
    db_query("INSERT INTO {debaser2_case_status} VALUES (NULL, 'case_status_2');"); // 2
    db_query("INSERT INTO {debaser2_case_status} VALUES (NULL, 'case_status_3');"); // 3

    // day, month, year
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 21, 04, 2009);"); // 1
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 12, 05, 2010);"); // 2 *
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 19, 09, 2010);"); // 3 *
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 15, 10, 2011);"); // 4 *
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 22, 03, 2008);"); // 5 *
    
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 21, 04, 2008);"); // 6 *
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 13, 05, 2009);"); // 7 *
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 19, 03, 2009);"); // 8 *
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 21, 02, 2010);"); // 9
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 17, 11, 2010);"); // 10
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 14, 06, 2011);"); // 11
    db_query("INSERT INTO {debaser2_violation_date} VALUES (NULL, 17, 11, 2011);"); // 12 *

    // id, total_victims, total_perpetrators, total_witnesses, case_id, group_id, debaser2_location_id, debaser2_violation_date_id, debaser2_violation_case_status_id, debaser2_violation_type_id, debaser2_violation_international_standard_id
    //                                                                         L         T
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 1, 1099, 1,  1, 3, 2, 1);"); // 1  L1 T2
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 2, 1099, 1,  2, 1, 2, 1);"); // 2  L1 T2
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 2, 1099, 2,  3, 1, 3, 1);"); // 3  L2 T3
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 3, 1099, 1,  4, 2, 3, 2);"); // 4  L1 T3
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 4, 1099, 1,  5, 3, 1, 2);"); // 5  L1 T1

    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 5, 1100, 1,  6, 1, 1, 1);"); // 6  L1 T1 IS1
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 6, 1100, 3,  7, 2, 1, 1);"); // 7  L3 T1 IS1
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 6, 1100, 2,  8, 2, 1, 1);"); // 8  L2 T1 IS1
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 7, 1100, 3,  9, 3, 2, 1);"); // 9  L3 T2 IS1
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 7, 1100, 1, 10, 3, 3, 1);"); // 10 L1 T3 IS1
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 7, 1100, 1, 11, 3, 1, 3);"); // 11 L1 T1 IS3
    db_query("INSERT INTO {debaser2_violation} VALUES (NULL, 9, 9, 9, 8, 1100, 3, 12, 1, 2, 3);"); // 12 L3 T2 IS3


    db_query("INSERT INTO {debaser2_actor_gender} VALUES (NULL, 'Male');"); // 1
    db_query("INSERT INTO {debaser2_actor_gender} VALUES (NULL, 'Female');"); // 2

    db_query("INSERT INTO {debaser2_actor_type} VALUES (NULL, 'Victim');"); // 1
    db_query("INSERT INTO {debaser2_actor_type} VALUES (NULL, 'Perpetrator');"); // 2
    db_query("INSERT INTO {debaser2_actor_type} VALUES (NULL, 'Witness');"); // 3

    db_query("INSERT INTO {debaser2_actor_ethnicity} VALUES (NULL, 'ethnicity_1');"); // 1
    db_query("INSERT INTO {debaser2_actor_ethnicity} VALUES (NULL, 'ethnicity_2');"); // 2
    db_query("INSERT INTO {debaser2_actor_ethnicity} VALUES (NULL, 'ethnicity_3');"); // 3

    db_query("INSERT INTO {debaser2_actor_political_affiliation} VALUES (NULL, 'political_affiliation_1');"); // 1
    db_query("INSERT INTO {debaser2_actor_political_affiliation} VALUES (NULL, 'political_affiliation_2');"); // 2
    db_query("INSERT INTO {debaser2_actor_political_affiliation} VALUES (NULL, 'political_affiliation_3');"); // 3

    // id, age, age_0_18, age_19_35, age_36_54, age_55_more, debaser2_violation_id, debaser2_actor_ethnicity_id, debaser2_actor_political_affiliation_id, debaser2_actor_type_id, debaser2_actor_gender_id

    //                                                                              V  E        T
    //                                                                              *  *        *
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 52, 0, 0, 1, 0,  1, 1,    1, 2, 1)"); // 1 P A3        T2  
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 14, 1, 0, 0, 0,  2, 1, NULL, 1, 1)"); // 2 * M PO-  T2 E1  2010 IS1
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 11, 1, 0, 0, 0,  3, 3, NULL, 1, 2)"); // 3 * F PO-  T3 E3  2010 IS1
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 32, 0, 1, 0, 0,  3, 2,    2, 2, 1)"); // 4 P A2        T3
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 25, 0, 1, 0, 0,  4, 2,    2, 1, 2)"); // 5 * F PO2  T3 E2  2011 IS2
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 63, 0, 0, 0, 1,  5, 2,    2, 1, 2)"); // 6 * F PO2  T1 E2  2008 IS2
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 27, 0, 1, 0, 0,  5, 2,    2, 1, 1)"); // 7 * M PO2  T1 E2  2008 IS2
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 31, 0, 1, 0, 0,  5, 3,    3, 3, 2)"); // 8          T1
      
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 12, 1, 0, 0, 0,  6, 3, NULL, 1, 2)"); // 9  * F PO- T1 E3  2008 IS1
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 18, 1, 0, 0, 0,  6, 1,    2, 1, 1)"); // 10 * M PO2 T1 E1  2008 IS1
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 36, 0, 0, 1, 0,  7, 1,    3, 2, 1)"); // 11 P A3       T1 
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 17, 1, 0, 0, 0,  7, 1,    1, 1, 2)"); // 12 * F PO1 T1 E1  2009 IS1
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 28, 0, 1, 0, 0,  8, 1,    2, 1, 2)"); // 13 * F PO2 T1 E1  2009 IS1
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 17, 1, 0, 0, 0,  8, 1,    2, 1, 1)"); // 14 * M PO2 T1 E1  2009 IS1
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 67, 0, 0, 0, 1,  9, 3,    2, 3, 1)"); // 15         T2
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 16, 1, 0, 0, 0, 10, 3,    1, 2, 1)"); // 16 P A1       T3
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 29, 0, 1, 0, 0, 10, 2,    1, 2, 1)"); // 17 P A2       T3
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 45, 0, 0, 1, 0, 11, 2,    1, 2, 2)"); // 18 P A3       T1
    db_query("INSERT INTO {debaser2_violation_actor} VALUES (NULL, 38, 0, 0, 1, 0, 12, 2,    1, 1, 2)"); // 19 * F PO1 T2 E2  2011 IS3
    
  }

  /**
   *
   */
  private function _get_tables_list() {
    $tables = array(
      'debaser2_actor' => array (
        'id',
        'age',
        'age_0_18',
        'age_19_35',
        'age_36_54',
        'age_55_more',
        'case_id',
        'group_id',
        'debaser2_actor_political_affiliation_id',
        'debaser2_actor_ethnicity_id',
        'debaser2_actor_type_id',
        'debaser2_actor_gender_id',
      ),
      'debaser2_actor_ethnicity' => array (
        'id',
        'title',
      ),
      'debaser2_actor_gender' => array (
        'id',
        'title',
      ),
      'debaser2_actor_political_affiliation' => array (
        'id',
        'title',
      ),
      'debaser2_actor_type' => array (
        'id',
        'title',
      ),
      'debaser2_case' => array (
        'id',
        'title',
        'total_victims',
        'total_perpetrators',
        'total_witnesses',
        'total_violations',
        'group_id',
        'debaser2_case_status_id',
        'debaser2_location_id',
        'debaser2_case_date_id',
        'debaser2_case_intervention_reason_id',
      ),
      'debaser2_case_date' => array (
        'id',
        'day',
        'month',
        'year',
      ),
      'debaser2_case_intervention_reason' => array (
        'id',
        'title',
      ),
      'debaser2_case_status' => array (
        'id',
        'title',
      ),
      'debaser2_location' => array (
        'id',
        'title',
      ),
      'debaser2_violation' => array (
        'id',
        'total_victims',
        'total_perpetrators',
        'total_witnesses',
        'case_id',
        'group_id',
        'debaser2_location_id',
        'debaser2_violation_date_id',
        'debaser2_violation_case_status_id',
        'debaser2_violation_type_id',
        'debaser2_violation_international_standard_id',
      ),
      'debaser2_violation_actor' => array (
        'id',
        'age',
        'age_0_18',
        'age_19_35',
        'age_36_54',
        'age_55_more',
        'debaser2_violation_id',
        'debaser2_actor_ethnicity_id',
        'debaser2_actor_political_affiliation_id',
        'debaser2_actor_type_id',
        'debaser2_actor_gender_id',
      ),
      'debaser2_violation_date' => array (
        'id',
        'day',
        'month',
        'year',
      ),
      'debaser2_violation_international_standard' => array (
        'id',
        'title',
      ),
      'debaser2_violation_type' => array (
        'id',
        'title',
      ),
    );

    return $tables;
  }
}

